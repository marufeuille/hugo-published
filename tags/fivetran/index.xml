<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fivetran on なんとなくブログ</title>
    <link>https://blog.marufeuille.dev/tags/fivetran/</link>
    <description>Recent content in fivetran on なんとなくブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>marufeuille</copyright>
    <lastBuildDate>Sat, 10 Sep 2022 21:00:00 +0900</lastBuildDate><atom:link href="https://blog.marufeuille.dev/tags/fivetran/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fivetran を触ってみて思ったことたち</title>
      <link>https://blog.marufeuille.dev/posts/fivetran_with_dbt/</link>
      <pubDate>Sat, 10 Sep 2022 21:00:00 +0900</pubDate>
      
      <guid>https://blog.marufeuille.dev/posts/fivetran_with_dbt/</guid>
      <description>はじめに 前回に引き続きELツールであるFivetranを試しており、ちょいちょい触って気づいたことを書き留めておきます。
一般的な話はドキュメントによく書かれているので、さわる中で気になった点にフォーカスして書いてみます。
所感 Transformations(dbt連携) 今回はfivetranのdbt連携を使い、オープンデータから稲作に関するデータと天気情報を持ってきてゴニョろうとする、みたいなデモを作ってみました。
Github
生データをlakeにいれ、少し加工したものをwarehouse、分析に使う段をmartとわけてます。
fivetran側でconnector/destinationの設定をして、githubにdbtのコードをアップロード、fivetran側で連携の設定を入れればあとは簡単に動作するようになります。
dbtを連携させるとこんな感じでソースからmartまでいい感じに可視化できました。 (文字等はあとから書き込んでいます)
手軽に使えるのはとても良いですね。
ログについて ログは以下のようにWeb UI上から確認できます。
また、ログの転送設定も可能で、例えば成功時のログは以下のようにjsonで構造化されてcloudlogginから確認できます。
dbtのログさえちゃんと構造化されているので、サクッとメトリックを作ったり通知するのもやりやすそうに見えます。
{ &amp;quot;insertId&amp;quot;: &amp;quot;9g7n20g1atrvd6&amp;quot;, &amp;quot;jsonPayload&amp;quot;: { &amp;quot;event&amp;quot;: &amp;quot;dbt_run_succeeded&amp;quot;, &amp;quot;created&amp;quot;: &amp;quot;2022-09-10T07:14:44.435Z&amp;quot;, &amp;quot;data&amp;quot;: { &amp;quot;startTime&amp;quot;: &amp;quot;2022-09-10T07:14:17.900Z&amp;quot;, &amp;quot;result&amp;quot;: { &amp;quot;stepResults&amp;quot;: [ { &amp;quot;step&amp;quot;: { &amp;quot;processBuilderCommand&amp;quot;: [ &amp;quot;dbt&amp;quot;, &amp;quot;test&amp;quot;, &amp;quot;--models&amp;quot;, &amp;quot;+sunshine_time&amp;quot;, &amp;quot;+temperature&amp;quot; ], &amp;quot;name&amp;quot;: &amp;quot;Scheduled: Test&amp;quot; }, &amp;quot;failedModelRuns&amp;quot;: 0, &amp;quot;successfulModelRuns&amp;quot;: 0, &amp;quot;success&amp;quot;: true, &amp;quot;commandResult&amp;quot;: { &amp;quot;error&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;exitCode&amp;quot;: 0, &amp;quot;output&amp;quot;: &amp;quot;07:14:39 Running with dbt=1.2.0\n07:14:39 Partial parse save file not found.</description>
    </item>
    
    <item>
      <title>FivetranをTerraformで構成する方法</title>
      <link>https://blog.marufeuille.dev/posts/fivetran_with_terraform/</link>
      <pubDate>Thu, 08 Sep 2022 21:00:00 +0900</pubDate>
      
      <guid>https://blog.marufeuille.dev/posts/fivetran_with_terraform/</guid>
      <description>はじめに ELツールであるFivetranを試す機会があり、terraformも使えるということでどこまで使えるのか試してみました
構成 データの転送は CloudSQL(GCP) -&amp;gt; Fivetran -&amp;gt; BigQuery という経路で行うことにしました。
CloudSQLの準備 CloudSQLはコンソール上から適当に作成しています。 その上でデータは面倒だったのでこの手順で用意し、その上で以下のようにしてユーザを作成します。
CREATE USER &#39;fivetran&#39;@&#39;%&#39; IDENTIFIED BY &#39;ぱすわーど&#39; GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE ON *.* TO &#39;fivetran&#39;@&#39;%&#39; Terraform  provider.tf  api_key, api_secretはWebUI上から発行しておいてください    1terraform { 2 required_providers { 3 fivetran = { 4 source = &amp;#34;fivetran/fivetran&amp;#34; 5 version = &amp;#34;0.6.3&amp;#34; 6 } 7 } 8} 91011provider &amp;#34;fivetran&amp;#34; { 12 api_key = &amp;#34;APIKEY&amp;#34; 13 api_secret = &amp;#34;APISECRET&amp;#34; 14}  main.</description>
    </item>
    
  </channel>
</rss>
